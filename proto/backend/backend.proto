// Defines the protobuf messsages and services used by the yt_box backend and
// clients to the backend.
//
// Usage:
// protoc -I proto/backend --go_out=plugins=grpc:proto/backend proto/backend/backend.proto

syntax = "proto3";

package backendpb;

service YtbBackend {
    // Submit a song to the backend service to be added to the play queue
    rpc SubmitSong(Submission) returns (Error) {}

    // Remove a song from the playlist
    rpc RemoveSong(Eviction) returns (Error) {}

    // Get the "now playing" song
    rpc GetNowPlaying(Empty) returns (Song) {}

    // Get the songs in the queue
    rpc GetPlaylist(Empty) returns (Playlist) {}

    // Save the playlist to the given file
    rpc SavePlaylist(FilePath) returns (Error) {}

    // Pop a song off the head of the queue
    rpc PopQueue(Empty) returns (Song) {}

    // Login the given user. If a user with the given id doesn't exist, then a
    // new one with the given name will be created. A successful call will
    // return the user will an id greater than 0.
    rpc LoginUser(User) returns (User) {}
}

// Empty message
message Empty {}

// Contains error number and message
message Error {
    // success flag
    bool success = 1;

    // error message body
    string message = 2;
}

// Data needed to submit a song to the backend service
message Submission {
    // Service link to the song (YouTube, Spotify, etc)
    string link = 1;

    // Id of the user who submitted the link
    uint32 userId = 2;
}

enum ServiceType {
    ServiceNone    = 0;
    ServiceYoutube = 1;
    ServiceSpotify = 2;
}

// A song in the queue
message Song {
    // title of the song
    string title = 1;

    // internal song id
    uint32 songId = 2;

    // name of user who submitted the song
    string username = 3;

    // id of user
    uint32 userId = 4;

    // id of service song belongs to
    ServiceType service = 5;

    // id specific to song's service
    string serviceId = 6;
}

// Playlist message
message Playlist {
    repeated Song songs = 1;
}

// Contains a file path
message FilePath {
    string path = 1;
}

// Login the user with the given name and id
message User {
    // the user's name
    string username = 1;

    // the user's id
    uint32 userId = 2;
}

// A song eviction
message Eviction {
    // id of song to evict
    uint32 songId = 1;

    // id of the user who submitted the song
    uint32 userId = 2;
}
